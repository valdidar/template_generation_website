         <li class="">
        <a class="register" href="/logout">logout</a>
      </li>
    </ul>
    </div>
  </nav>
<div class="container">
{{!-- now in version 4, i want to make html template, where i can have headings from h1 to h6, i can have paragraph with p tag,
as i take these input from different input elements, i also want to visualise the output by showing the html in a small screen --}}
<label class="heading" for="name">Enter the name of the template:</label>
<input class="heading" type="text" id="name" name="name" placeholder="Your name..">
<h4 class="subsubheading">Note: Simply include variables in your template using ${sample variable} syntax for easy customization!</h4>
<div class="new-template">
    <div class="leftpart">
        {{!-- this holds the output screen --}}
        <div class="whitescreen"></div>
        {{!-- this holds the final submit button to save the html with name of the file --}}
        <form action="" onsubmit="submitForm()">
            <input class="down submit" type="submit" value="Submit">
        </form>
    </div>
    <div class="rightpart">
        {{!-- add heading --}}
        <form action="" onsubmit="insertHeading()">
            <label class="down subheading" for="heading-tags">Enter heading</label>
            {{!-- choose size of heading from h1 to h6 --}}
            <select class="down" name="heading-tags" id="heading">
                <option value="h1">h1</option>
                <option value="h2">h2</option>
                <option value="h3">h3</option>
                <option value="h4">h4</option>
                <option value="h5">h5</option>
                <option value="h6">h6</option>
            <input class="down" type="text" id="heading-value" name="heading" placeholder="Your heading..">
            <input class="down submit" type="submit" value="Insert" onclick="">
        </form>
        {{!-- adding paragraph --}}
        <form action="" onsubmit="insertParagraph()">
            <label class="down subheading" for="paragraph">Enter plaintext</label>
            <input class="down" type="text" id="paragraph" name="paragraph" placeholder="Your paragraph..">
            <input class="down submit" type="submit" value="Insert" onclick="">
        </form>
        {{!-- adding a horizontal line --}}
        <form action="" onsubmit="insertHorizontalLine()">
            <label class="down subheading" for="horizontal-line">Add horizontal line</label>
            <input class="down submit" type="submit" value="Insert" onclick="">
        </form>
        {{!-- create a costom size table just below, add element directly in table, detect all the text in table and then insert in whitescreen --}}
        <form action="" onsubmit="createEmptyTable()">
            <label class="down subheading" for="table">Add table</label>
            <input class="down" type="number" id="table-rows" name="table-rows" placeholder="Enter number of rows..">
            <input class="down" type="number" id="table-columns" name="table-columns" placeholder="Enter number of columns..">
            <input class="down submit" type="submit" value="Insert" onclick="">
        </form>
        <div class="fillingEmptyTable" id="table" >
        </div>
        <div class="fillingEmptyTableSubmit">

        </div>
        
    </div>
</div>
</div>
<script>
    //add name to input if name is not empty
    if ("{{name}}" != ""){
        document.getElementById("name").value = "{{name}} copy";
        // change Enter the name of the template: to Edit the name of the template:
        document.getElementsByClassName("heading")[0].innerHTML = "Edit the name of the template:"; 
    }
    
    //add the previous html to the whitescreen if it is not empty
    if("{{text}}" != ""){
    previousHtml= "{{text}}";
        const parser = new DOMParser();
        const decodedText = parser.parseFromString(`<!doctype html><body>${previousHtml}`, "text/html").body.textContent;
        console.log(decodedText);
        document.getElementsByClassName("whitescreen")[0].innerHTML = decodedText;
    }
    // this function takes h tag from heading-tags and heading-value and inserts the htmp in string htmlInsideWhitescreen
    function insertHeading() {
        htmlInsideWhitescreen = ``;
        event.preventDefault();
        var heading = document.getElementById("heading").value;
        var headingValue = document.getElementById("heading-value").value;
        document.getElementById("heading-value").value = "";
        //var html = `<${heading}  contenteditable="true" >${headingValue}</${heading}>`;
        // add a delete button to the side of elements
        var html = `<div class="editable-container"><${heading}  contenteditable="true" >${headingValue}</${heading}><button class="delete-button editable-element"  onclick="deleteElement(this)">Delete</button></div>`;
        htmlInsideWhitescreen =  html;
        console.log(htmlInsideWhitescreen);
        document.getElementsByClassName("whitescreen")[0].insertAdjacentHTML("beforeend", htmlInsideWhitescreen);
    }
    // this function deletes the element
    function deleteElement(element) {
        element.parentNode.remove();
    }
    // this function inserts paragraph in the htmlInsideWhitescreen
    function insertParagraph() {
        htmlInsideWhitescreen = ``;
        event.preventDefault();
        var paragraph = document.getElementById("paragraph").value;
        document.getElementById("paragraph").value = "";
        //var html = `<p contenteditable="true">${paragraph}</p>`;
        // add a delete button to the side of elements
        var html = `<div class="editable-container"><p contenteditable="true">${paragraph}</p><button class="delete-button editable-element" onclick="deleteElement(this)">Delete</button></div>`;
        htmlInsideWhitescreen =  html;
        console.log(htmlInsideWhitescreen);
        document.getElementsByClassName("whitescreen")[0].insertAdjacentHTML("beforeend", htmlInsideWhitescreen);    
        }
    // this function inserts horizontal line in the htmlInsideWhitescreen
    function insertHorizontalLine() {
        htmlInsideWhitescreen = ``;
        event.preventDefault();
        //var html = `<hr>`;
        // add a delete button to the side of elements
        var html = `<div class="editable-container"><hr><button class="delete-button editable-element" onclick="deleteElement(this)">Delete</button></div>`;
        htmlInsideWhitescreen = html;
        console.log(htmlInsideWhitescreen);
        document.getElementsByClassName("whitescreen")[0].insertAdjacentHTML("beforeend", htmlInsideWhitescreen);
    }
    // this function creates an empty table, take its input and then insert in the htmlInsideWhitescreen
    function createEmptyTable() {
        event.preventDefault();
        var rows = document.getElementById("table-rows").value;
        var columns = document.getElementById("table-columns").value;
        document.getElementById("table-rows").value = "";
        document.getElementById("table-columns").value = "";
        var html = `<table id="table">`;
        for (var i = 0; i < rows; i++) {
            html = html + `<tr>`;
            for (var j = 0; j < columns; j++) {
                html = html + `<td contenteditable="true"></td>`;
            }
            html = html + `</tr>`;
        }
        html = html + `</table>`;
        document.getElementsByClassName("fillingEmptyTable")[0].innerHTML = html;
        document.getElementsByClassName("fillingEmptyTableSubmit")[0].innerHTML = `<form action="" onsubmit="insertTable()">
            <label class="down subheading" for="table">Insert table</label>
            <input class="down submit" type="submit" value="Insert" onclick="">
        </form>`;
        
    }
    // this function inserts the table in the htmlInsideWhitescreen and then clears the original table
    function insertTable() {
        htmlInsideWhitescreen = ``;
        event.preventDefault();
        var table = document.getElementById("table").innerHTML;
        // add a delete button to the side of elements
        table = `<div class="editable-container">${table}<button class="delete-button editable-element" onclick="deleteElement(this)">Delete</button></div>`;
        htmlInsideWhitescreen = table;
        console.log(htmlInsideWhitescreen);
        document.getElementsByClassName("whitescreen")[0].insertAdjacentHTML("beforeend", htmlInsideWhitescreen);
        document.getElementsByClassName("fillingEmptyTable")[0].innerHTML = "";
        document.getElementsByClassName("fillingEmptyTableSubmit")[0].innerHTML = "";
    }
    // this function submits the name of the template, html inside the whitescreen and POST it to /new-template using xhr
    function submitForm() {
        event.preventDefault();

        //prevent empty name
        if (document.getElementById("name").value == "") {
            alert("Please enter a name for the template!");
            return;
        }
        var name = document.getElementById("name").value;
        var html = document.getElementsByClassName("whitescreen")[0].innerHTML;
        var data = {
            name: name,
            text: html,
            slug: name.toLowerCase().replace(/ /g, '-')
        };
        console.log(JSON.stringify(data));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/new-template");
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify(data));
        xhr.onload = function () {
            console.log(this.responseText);
            window.location.href = "/";
        };
    }
</script>